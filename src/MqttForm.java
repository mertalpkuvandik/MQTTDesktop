
import com.formdev.flatlaf.FlatDarkLaf;
import com.formdev.flatlaf.FlatIntelliJLaf;
import com.formdev.flatlaf.intellijthemes.FlatGradiantoDeepOceanIJTheme;
import static com.sun.xml.internal.fastinfoset.alphabet.BuiltInRestrictedAlphabets.table;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableModel;
import org.eclipse.paho.client.mqttv3.IMqttDeliveryToken;
import org.eclipse.paho.client.mqttv3.MqttCallback;
import org.eclipse.paho.client.mqttv3.MqttClient;
import org.eclipse.paho.client.mqttv3.MqttConnectOptions;
import org.eclipse.paho.client.mqttv3.MqttException;
import org.eclipse.paho.client.mqttv3.MqttMessage;
import org.eclipse.paho.client.mqttv3.persist.MemoryPersistence;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author User
 */
public class MqttForm extends javax.swing.JFrame {

    /**
     * Creates new form MqttForm
     */
    int SubQos,PubQoS,conncount=0;
    String protocol = "tcp://";
    boolean isConnect;
    MqttClient Client;
    String host;
   
    public MqttForm() {
        
        initComponents();


    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        ClientIdLabel = new javax.swing.JLabel();
        ClientIdTextConnect = new javax.swing.JTextField();
        ConnectButton = new javax.swing.JButton();
        DisconnectButton = new javax.swing.JButton();
        HostTextConnect = new javax.swing.JTextField();
        HostLabel = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        PubQoSLabel = new javax.swing.JLabel();
        PubTopicText = new javax.swing.JTextField();
        PubMessageTextBox = new javax.swing.JTextField();
        PublishButton = new javax.swing.JButton();
        MessageLabel = new javax.swing.JLabel();
        RetainedCheckBox = new javax.swing.JCheckBox();
        PublishTopicLabel = new javax.swing.JLabel();
        PubClearButton = new javax.swing.JButton();
        PubQoSComboBox1 = new javax.swing.JComboBox<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        PubMessageTable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        SubsQoSLabel = new javax.swing.JLabel();
        SubscribeButton = new javax.swing.JButton();
        SubsTopicText = new javax.swing.JTextField();
        UnsubscribeButton = new javax.swing.JButton();
        SubsTopicLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        SubsTable = new javax.swing.JTable();
        SubQoSComboBox = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        MessageTable = new javax.swing.JTable();
        SubClearButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel4.setForeground(new java.awt.Color(51, 51, 51));

        ClientIdLabel.setFont(new java.awt.Font("Berlin Sans FB", 0, 18)); // NOI18N
        ClientIdLabel.setText("Client Id");

        ClientIdTextConnect.setFont(new java.awt.Font("Berlin Sans FB", 0, 18)); // NOI18N
        ClientIdTextConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClientIdTextConnectActionPerformed(evt);
            }
        });

        ConnectButton.setFont(new java.awt.Font("Berlin Sans FB", 0, 18)); // NOI18N
        ConnectButton.setText("Connect");
        ConnectButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ConnectButtonMouseClicked(evt);
            }
        });

        DisconnectButton.setFont(new java.awt.Font("Berlin Sans FB", 0, 18)); // NOI18N
        DisconnectButton.setText("Disconnect");
        DisconnectButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DisconnectButtonMouseClicked(evt);
            }
        });

        HostTextConnect.setFont(new java.awt.Font("Berlin Sans FB", 0, 18)); // NOI18N

        HostLabel.setFont(new java.awt.Font("Berlin Sans FB", 0, 18)); // NOI18N
        HostLabel.setText("Host");
        HostLabel.setToolTipText("");

        jTabbedPane1.setFont(new java.awt.Font("Berlin Sans FB", 0, 18)); // NOI18N

        jPanel2.setForeground(new java.awt.Color(51, 51, 51));

        PubQoSLabel.setFont(new java.awt.Font("Berlin Sans FB", 0, 18)); // NOI18N
        PubQoSLabel.setText("QoS");

        PubTopicText.setFont(new java.awt.Font("Berlin Sans FB", 0, 18)); // NOI18N

        PubMessageTextBox.setFont(new java.awt.Font("Berlin Sans FB", 0, 18)); // NOI18N

        PublishButton.setFont(new java.awt.Font("Berlin Sans FB", 0, 18)); // NOI18N
        PublishButton.setText("Publish");
        PublishButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                PublishButtonMouseClicked(evt);
            }
        });

        MessageLabel.setFont(new java.awt.Font("Berlin Sans FB", 0, 18)); // NOI18N
        MessageLabel.setText("Message");

        RetainedCheckBox.setFont(new java.awt.Font("Berlin Sans FB", 0, 18)); // NOI18N
        RetainedCheckBox.setText("Retained");
        RetainedCheckBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                RetainedCheckBoxMouseClicked(evt);
            }
        });

        PublishTopicLabel.setFont(new java.awt.Font("Berlin Sans FB", 0, 18)); // NOI18N
        PublishTopicLabel.setText("Topic");

        PubClearButton.setFont(new java.awt.Font("Berlin Sans FB", 0, 18)); // NOI18N
        PubClearButton.setText("Clear");
        PubClearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PubClearButtonActionPerformed(evt);
            }
        });

        PubQoSComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "2" }));
        PubQoSComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PubQoSComboBox1ActionPerformed(evt);
            }
        });

        PubMessageTable.setFont(new java.awt.Font("Berlin Sans FB", 0, 18)); // NOI18N
        PubMessageTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Topic", "Message", "Time"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(PubMessageTable);
        if (PubMessageTable.getColumnModel().getColumnCount() > 0) {
            PubMessageTable.getColumnModel().getColumn(2).setResizable(false);
        }

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 1259, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(MessageLabel)
                        .addGap(18, 18, 18))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(PublishTopicLabel)
                        .addGap(39, 39, 39)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(PubTopicText, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(PubMessageTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(RetainedCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(PubQoSLabel)
                        .addGap(18, 18, 18)
                        .addComponent(PubQoSComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(PublishButton, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(PubClearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PublishTopicLabel)
                    .addComponent(PubTopicText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RetainedCheckBox)
                    .addComponent(PubQoSLabel)
                    .addComponent(PubQoSComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(MessageLabel)
                            .addComponent(PubMessageTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(PublishButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(PubClearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 581, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Publish", jPanel2);

        jPanel1.setForeground(new java.awt.Color(51, 51, 51));
        jPanel1.setFont(new java.awt.Font("Berlin Sans FB", 0, 18)); // NOI18N

        SubsQoSLabel.setFont(new java.awt.Font("Berlin Sans FB", 0, 18)); // NOI18N
        SubsQoSLabel.setText("QoS");

        SubscribeButton.setFont(new java.awt.Font("Berlin Sans FB", 0, 18)); // NOI18N
        SubscribeButton.setText("Subscribe");
        SubscribeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SubscribeButtonMouseClicked(evt);
            }
        });

        SubsTopicText.setFont(new java.awt.Font("Berlin Sans FB", 0, 18)); // NOI18N

        UnsubscribeButton.setFont(new java.awt.Font("Berlin Sans FB", 0, 18)); // NOI18N
        UnsubscribeButton.setText("Unsubscribe");
        UnsubscribeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                UnsubscribeButtonMouseClicked(evt);
            }
        });

        SubsTopicLabel.setFont(new java.awt.Font("Berlin Sans FB", 0, 18)); // NOI18N
        SubsTopicLabel.setText("Topic");

        SubsTable.setFont(new java.awt.Font("Berlin Sans FB", 0, 18)); // NOI18N
        SubsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Subscriptions"
            }
        ));
        jScrollPane1.setViewportView(SubsTable);

        SubQoSComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "2" }));
        SubQoSComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubQoSComboBoxActionPerformed(evt);
            }
        });

        MessageTable.setFont(new java.awt.Font("Berlin Sans FB", 0, 18)); // NOI18N
        MessageTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Topic", "Message", "Time"
            }
        ));
        jScrollPane2.setViewportView(MessageTable);

        SubClearButton.setFont(new java.awt.Font("Berlin Sans FB", 0, 18)); // NOI18N
        SubClearButton.setText("Clear");
        SubClearButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SubClearButtonMouseClicked(evt);
            }
        });
        SubClearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubClearButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(SubsTopicLabel)
                                .addGap(26, 26, 26)
                                .addComponent(SubsTopicText, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(SubscribeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(UnsubscribeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(18, 18, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGap(38, 38, 38)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 873, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(SubsQoSLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(SubQoSComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(SubClearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SubsTopicLabel)
                    .addComponent(SubsTopicText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SubsQoSLabel)
                    .addComponent(SubQoSComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SubscribeButton)
                    .addComponent(UnsubscribeButton)
                    .addComponent(SubClearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 589, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addGap(386, 386, 386))
        );

        jTabbedPane1.addTab("Subscribe", jPanel1);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/promis.jpg"))); // NOI18N

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(HostLabel)
                        .addGap(18, 18, 18)
                        .addComponent(HostTextConnect, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(ClientIdLabel)
                        .addGap(18, 18, 18)
                        .addComponent(ClientIdTextConnect, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(ConnectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(DisconnectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jTabbedPane1)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(HostTextConnect, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ClientIdTextConnect, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(HostLabel)
                                .addComponent(ClientIdLabel))
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(DisconnectButton)
                                .addComponent(ConnectButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addGap(13, 13, 13)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 729, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jMenu1.setText("File");
        jMenu1.setFont(new java.awt.Font("Berlin Sans FB", 0, 18)); // NOI18N

        jMenuItem1.setFont(new java.awt.Font("Berlin Sans FB", 0, 15)); // NOI18N
        jMenuItem1.setText("Exit");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Help");
        jMenu2.setFont(new java.awt.Font("Berlin Sans FB", 0, 18)); // NOI18N
        jMenu2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu2ActionPerformed(evt);
            }
        });

        jMenuItem2.setFont(new java.awt.Font("Berlin Sans FB", 0, 15)); // NOI18N
        jMenuItem2.setText("About");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void DisconnectButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DisconnectButtonMouseClicked
        if(isConnect)
        {
            try
            {
                Client.disconnect();
                isConnect=false;
                System.out.println("Disconnected");
                JOptionPane.showMessageDialog(this, "Disconnected");
                conncount=0;
            }
            catch (MqttException me)
            {
               // Logger.getLogger(MqttFrm.class.getName()).log(Level.SEVERE, null, me);
            }
        }
        else
        {
            System.out.println( "You are not connected to server!!!");
            JOptionPane.showMessageDialog(this, "You are not connected to server!!!");
        }
    }//GEN-LAST:event_DisconnectButtonMouseClicked

    private void ConnectButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ConnectButtonMouseClicked
        connect();
    }//GEN-LAST:event_ConnectButtonMouseClicked

    private void ClientIdTextConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClientIdTextConnectActionPerformed

    }//GEN-LAST:event_ClientIdTextConnectActionPerformed

    private void PublishButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PublishButtonMouseClicked

        if(isConnect)
        {
            try
            {
                System.out.println("Publishing message: "+PubMessageTextBox.getText());
                MqttMessage message = new MqttMessage(PubMessageTextBox.getText().getBytes());
                message.setQos(PubQoS);
                if(RetainedCheckBox.isSelected())
                {
                    message.setRetained(true);
                }
                else
                {
                    message.setRetained(false);
                }
                Client.publish(PubTopicText.getText(), message);
                DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern(" dd/MM/yyyy HH:mm:ss:ms");  
                LocalDateTime date = LocalDateTime.now(); 
                DefaultTableModel tblModelpub=(DefaultTableModel)PubMessageTable.getModel();
                String data[]={PubTopicText.getText(),message.toString(),dateFormatter.format(date)};
                DefaultTableModel tblModel=(DefaultTableModel)PubMessageTable.getModel();
                tblModelpub.addRow(data);
                System.out.println("Message published");
                
            } catch(MqttException me) {
                System.out.println("reason "+me.getReasonCode());
                System.out.println("msg "+me.getMessage());
                System.out.println("loc "+me.getLocalizedMessage());
                System.out.println("cause "+me.getCause());
                System.out.println("excep "+me);
                me.printStackTrace();
            }
        }
        else
        {
            System.out.println( "You are not connected to server!!!");
            JOptionPane.showMessageDialog(this, "You are not connected to server!!!");
        }
    }//GEN-LAST:event_PublishButtonMouseClicked

    private void SubscribeButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SubscribeButtonMouseClicked
        if(isConnect)
        {
            try {
                 
                Client.subscribe(SubsTopicText.getText(),SubQos );
                String topic=SubsTopicText.getText();
                DefaultTableModel tblModelsub=(DefaultTableModel)SubsTable.getModel();
                String datasub[]={topic};
                tblModelsub.addRow(datasub);
                Client.setCallback(new MqttCallback()
                    {
                        @Override
                        public void connectionLost(Throwable thrwbl)
                        {
                            System.out.println("Disconnected");
                        }

                        @Override
                        public void messageArrived(String string, MqttMessage msg) throws Exception
                        {
                            String message=msg.toString();
                              DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern(" dd/MM/yyyy HH:mm:ss:ms");  
                              LocalDateTime date = LocalDateTime.now();  
                            String data[]={topic,message,dateFormatter.format(date)};
                            DefaultTableModel tblModel=(DefaultTableModel)MessageTable.getModel();
                            tblModel.addRow(data);
                        }

                        @Override
                        public void deliveryComplete(IMqttDeliveryToken ımdt)
                        {
                            System.out.println("Message Delivered");
                        }
                    });
                    System.out.println("Subscribed");
                } catch (MqttException ex)
                {
                    Logger.getLogger(MqttForm.class.getName()).log(Level.SEVERE, null, ex);

                }
            }
            else
            {
                System.out.println( "You are not connected to server!!!");
                JOptionPane.showMessageDialog(this, "You are not connected to server!!!");
            }
    }//GEN-LAST:event_SubscribeButtonMouseClicked

    private void RetainedCheckBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RetainedCheckBoxMouseClicked

    }//GEN-LAST:event_RetainedCheckBoxMouseClicked

    private void UnsubscribeButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_UnsubscribeButtonMouseClicked
        if(isConnect)
        {
            try
            {
                Client.unsubscribe(SubsTopicText.getText());
                String topic=SubsTopicText.getText();
                String data[]={topic};
                DefaultTableModel tblModel=(DefaultTableModel)SubsTable.getModel();
                int deletedrow = SubsTable.getSelectedRow();
                tblModel.removeRow(deletedrow);
                System.out.println("Unsubscribed");
            } catch (MqttException ex) {
                Logger.getLogger(MqttForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else
        {
            System.out.println( "You are not connected to server!!!");
            JOptionPane.showMessageDialog(this, "You are not connected to server!!!");
        }
    }//GEN-LAST:event_UnsubscribeButtonMouseClicked

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenu2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu2ActionPerformed
        
    }//GEN-LAST:event_jMenu2ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
            try {
            Desktop.getDesktop().browse(new URI("https://www.inscada.com/"));
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (URISyntaxException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void SubQoSComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubQoSComboBoxActionPerformed
        String SubQosString= SubQoSComboBox.getSelectedItem().toString();
        SubQos=Integer.parseInt(SubQosString);
    }//GEN-LAST:event_SubQoSComboBoxActionPerformed

    private void PubQoSComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PubQoSComboBox1ActionPerformed
           String PubQosString= PubQoSComboBox1.getSelectedItem().toString();
          PubQoS=Integer.parseInt(PubQosString);
    }//GEN-LAST:event_PubQoSComboBox1ActionPerformed

    private void SubClearButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SubClearButtonMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_SubClearButtonMouseClicked

    private void SubClearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubClearButtonActionPerformed
       DefaultTableModel subclr = (DefaultTableModel)MessageTable.getModel();
        while(subclr.getRowCount() > 0)
        {
            subclr.removeRow(0);
        }   
    }//GEN-LAST:event_SubClearButtonActionPerformed

    private void PubClearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PubClearButtonActionPerformed
        DefaultTableModel pubclr = (DefaultTableModel)PubMessageTable.getModel();
        while(pubclr.getRowCount() > 0)
        {
            pubclr.removeRow(0);
        }     
    }//GEN-LAST:event_PubClearButtonActionPerformed

   
    void connect()
    {
        if(conncount==0)
        {    
         try
        {
            
            MemoryPersistence persistence = new MemoryPersistence();
            host=protocol+HostTextConnect.getText();
            Client = new MqttClient(host, ClientIdTextConnect.getText(), persistence);
            MqttConnectOptions connOpts = new MqttConnectOptions();
            connOpts.setCleanSession(true);
            System.out.println("Connecting to broker: "+HostTextConnect.getText());
            Client.connect(connOpts);
            System.out.println("Connected");
             isConnect = true;
            JOptionPane.showMessageDialog(this, "Connected");
            conncount++;
            
        }
        catch (MqttException me)
        {
//            Logger.getLogger(MqttFrm.class.getName()).log(Level.SEVERE, null, me);
            System.out.println("reason "+me.getReasonCode());
            JOptionPane.showMessageDialog(this,"msg "+me.getMessage());
            System.out.println("msg "+me.getMessage());
            System.out.println("loc "+me.getLocalizedMessage());
            System.out.println("cause "+me.getCause());
            System.out.println("excep "+me);
        }
        }
        else
        {
             JOptionPane.showMessageDialog(this, "You Are Already Connected");
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
          
            UIManager.setLookAndFeel(new FlatIntelliJLaf());
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(MqttForm.class.getName()).log(Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MqttForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ClientIdLabel;
    private javax.swing.JTextField ClientIdTextConnect;
    private javax.swing.JButton ConnectButton;
    private javax.swing.JButton DisconnectButton;
    private javax.swing.JLabel HostLabel;
    private javax.swing.JTextField HostTextConnect;
    private javax.swing.JLabel MessageLabel;
    private javax.swing.JTable MessageTable;
    private javax.swing.JButton PubClearButton;
    private javax.swing.JTable PubMessageTable;
    private javax.swing.JTextField PubMessageTextBox;
    private javax.swing.JComboBox<String> PubQoSComboBox1;
    private javax.swing.JLabel PubQoSLabel;
    private javax.swing.JTextField PubTopicText;
    private javax.swing.JButton PublishButton;
    private javax.swing.JLabel PublishTopicLabel;
    private javax.swing.JCheckBox RetainedCheckBox;
    private javax.swing.JButton SubClearButton;
    private javax.swing.JComboBox<String> SubQoSComboBox;
    private javax.swing.JLabel SubsQoSLabel;
    private javax.swing.JTable SubsTable;
    private javax.swing.JLabel SubsTopicLabel;
    private javax.swing.JTextField SubsTopicText;
    private javax.swing.JButton SubscribeButton;
    private javax.swing.JButton UnsubscribeButton;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables
}
